diff --git a/js/viddler-player.js b/js/viddler-player.js
new file mode 100755
index 0000000..4db8f69
--- /dev/null
+++ b/js/viddler-player.js
@@ -0,0 +1,25 @@
+;(function ($, Drupal) {
+
+  /**
+   * Render viddler player.
+   * @type {{}}
+   */
+  Drupal.behaviors.viddler = {
+    attach: function (context, settings) {
+      var viddlerId = settings.viddler.viddlerId;
+
+      if (typeof viddlerId !== 'undefined') {
+        Drupal.settings.viddler.exist = [];
+
+        // Add Viddler player object in global Drupal settings.
+        Drupal.settings.viddler.exist['viddler-' + viddlerId] = new ViddlerEmbed({
+          videoId: viddlerId,
+          target: '#viddler-player-' + viddlerId
+        });
+
+        // Delete settings for preventing of rendering viddler player twice and duplicates of videos.
+        delete settings.viddler.viddlerId;
+      }
+    }
+  };
+})(jQuery, Drupal);
diff --git a/js/viddler.js b/js/viddler.js
new file mode 100755
index 0000000..374e94e
--- /dev/null
+++ b/js/viddler.js
@@ -0,0 +1,42 @@
+(function ($) {
+  $(document).ready(function () {
+    /**
+     * #892 - Track Viddler Video Plays.
+     */
+    $("div[id^='viddler-player-']").each(function (i, el) {
+      // Get the Viddler Id from the iframe parameter. (viddler-xxxxxxx)
+      var elementId = el.id.split('-');
+      var viddlerId = elementId[elementId.length - 1];
+
+      checkForViddlerEvent(el.id, viddlerId);
+    });
+
+    /**
+     * Check for a viddler event change and make any changes needed.
+     *
+     * @param integer id
+     *   The id attribute of the iframe.
+     * @param string viddlerId
+     *   Viddler ID.
+     */
+    function checkForViddlerEvent(id, viddlerId) {
+      var player = Drupal.settings.viddler.exist['viddler-' + viddlerId];
+      var sentGoogleEvent = false;
+
+      /**
+       * Handle event if player in playing video.
+       */
+      player.manager.events.on('mediaElement:play', function () {
+        if (sentGoogleEvent === false) {
+          // Add Google Event that Video was played.
+          if (typeof ga === 'function') {
+            ga('send', 'event', 'Viddler Video Plays', viddlerId, window.location.pathname);
+          }
+
+          // Set to true so it won't fire twice for a video.
+          sentGoogleEvent = true;
+        }
+      });
+    }
+  });
+})(jQuery);
diff --git a/library/phpviddler.php b/library/phpviddler.php
index 2a769b5..a014df9 100755
--- a/library/phpviddler.php
+++ b/library/phpviddler.php
@@ -1,5 +1,6 @@
 <?php
-/* Viddler PHP Wrapper for Viddler's API 
+
+/* Viddler PHP Wrapper for Viddler's API
   Version 2.2
   Released: December 2010.
   http://developers.viddler.com/projects/api-wrappers/phpviddler/
@@ -7,49 +8,50 @@
 
 /* Viddler Class
   use $var = new Viddler_V2(API KEY); */
+
 class Viddler_V2 {
+
   public $api_key = NULL;
-  
+
   // Construct! Like the Matrix.
   public function __construct($api_key) {
-    if (!$api_key) {
-      return FALSE;
-    } else {
-      $this->api_key = $api_key;
-    }
+    $this->api_key = $api_key;
   }
 
   /**
-  Can be called like such:
-  $__api = new Viddler_API("YOUR KEY");
-  $array = $__api->viddler_users_getProfile(array("user"=>"phpfunk"));
-  **/
-  public function __call($method, $args) { return self::call($method, $args, "object"); }
-  
-  protected function call($method, $args, $call)
-  { 
+   * Can be called like such:
+   * $__api = new Viddler_API("YOUR KEY");
+   * $array = $__api->viddler_users_getProfile(['user' => 'username']);
+   **/
+  public function __call($method, $args) {
+    return self::call($method, $args, "object");
+  }
+
+  protected function call($method, $args, $call) {
     /**
-    Format the Method
-    Accepted Formats:
-    
-    $viddler->viddler_users_auth();
-    **/
+     * Format the Method
+     * Accepted Formats:
+     *
+     * $viddler->viddler_users_auth();
+     */
     $method = str_replace("_", ".", $method);
-    
+
     //If the method exists here, call it
-    if (method_exists($this, $method)) { return $this->$method($args[0]); }
-    
+    if (method_exists($this, $method)) {
+      return $this->$method($args[0]);
+    }
+
     // Used to construct the querystring.
-    $query = array();
-    
+    $query = [];
+
     // Methods that require HTTPS
-    $secure_methods = array(
+    $secure_methods = [
       'viddler.users.auth',
-      'viddler.users.register'
-    );
-    
+      'viddler.users.register',
+    ];
+
     // Methods that require POST
-    $post_methods = array(
+    $post_methods = [
       'viddler.encoding.cancel',
       'viddler.encoding.encode',
       'viddler.encoding.setOptions',
@@ -84,35 +86,37 @@ class Viddler_V2 {
       'viddler.videos.setThumbnail',
       'viddler.videos.setDetails',
       'viddler.videos.enableAds',
-      'viddler.videos.disableAds'
-    );
-    
-    // Methods that require Binary transfer
-    $binary_methods = array(
+      'viddler.videos.disableAds',
+    ];
+
+    // Methods that require Binary transfer.
+    $binary_methods = [
       'viddler.videos.setThumbnail',
-      'viddler.videos.upload'
-    );
-    
+      'viddler.videos.upload',
+    ];
+
     $binary = (in_array($method, $binary_methods)) ? TRUE : FALSE;
     $post = (in_array($method, $post_methods)) ? TRUE : FALSE;
-    
+
     // Figure protocol http:// or https://
-    $protocol = (in_array($method, $secure_methods)) ? "https" : "http";
-    
+    $protocol = (in_array($method, $secure_methods) && $method != 'viddler.users.auth') ? "https" : "http";
+
     // Build API endpoint URL
     // This is generally used to switch the end-point for uploads. See /examples/uploadExample.php in PHPViddler 2
-    if(isset($args[1])) {
+    if (isset($args[1])) {
       $url = $args[1];
-    } else {
+    }
+    else {
       $url = $protocol . "://api.viddler.com/api/v2/" . $method . ".php";
     }
-    
+
     if ($post === TRUE) { // Is a post method
-        array_push($query, "key=" . $this->api_key); // Adds API key to the POST arguments array
-    } else {
+      array_push($query, "key=" . $this->api_key); // Adds API key to the POST arguments array
+    }
+    else {
       $url .= "?key=" . $this->api_key;
     }
-    
+
     //Figure the query string
     if (@count($args[0]) > 0 && is_array($args[0])) {
       foreach ($args[0] as $k => $v) {
@@ -120,7 +124,6 @@ class Viddler_V2 {
           array_push($query, "$k=$v");
         }
       }
-      $query_arr = $query;
       $query = implode("&", $query);
       if ($post === FALSE) {
         $url .= (!empty($query)) ? "&" . $query : "";
@@ -128,29 +131,33 @@ class Viddler_V2 {
     }
     else {
       $query = NULL;
-      $args[0] = array();
+      $args[0] = [];
     }
-    
-    // Custruct the cURL call
+
+    // Construct the cURL call.
     $ch = curl_init();
-    curl_setopt ($ch, CURLOPT_URL, $url);
-    curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
-    curl_setopt ($ch, CURLOPT_HEADER, 0);
-    curl_setopt ($ch, CURLOPT_TIMEOUT, 0);
-    curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
-    
-    // Figure POST vs. GET
+    curl_setopt($ch, CURLOPT_URL, $url);
+    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
+    curl_setopt($ch, CURLOPT_HEADER, 0);
+    curl_setopt($ch, CURLOPT_TIMEOUT, 0);
+    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
+
+    // Figure out POST or GET.
     if ($post == TRUE) {
       curl_setopt($ch, CURLOPT_POST, TRUE);
       if ($binary === TRUE) {
-        $binary_args = array();
-        foreach($args[0] as $k=>$v) {
-          if($k != 'file') $binary_args[$k] = $v;
+        $binary_args = [];
+        foreach ($args[0] as $k => $v) {
+          if ($k != 'file') {
+            $binary_args[$k] = $v;
+          }
+        }
+
+        if (!isset($binary_args['key'])) {
+          $binary_args['key'] = $this->api_key;
         }
-        
-        if(!isset($binary_args['key'])) $binary_args['key'] = $this->api_key;
         $binary_args['file'] = $args[0]['file'];
-        
+
         curl_setopt($ch, CURLOPT_POSTFIELDS, $binary_args);
       }
       else {
@@ -160,22 +167,19 @@ class Viddler_V2 {
     else {
       curl_setopt($ch, CURLOPT_HTTPGET, TRUE);
     }
-    
-    //G et the response
+
+    // Get the response.
     $response = curl_exec($ch);
-    
+
     if (!$response) {
-      $response = $error = curl_error($ch);
-      
-      return $response;
+      return curl_error($ch);
     }
     else {
       $response = unserialize($response);
     }
-    
+
     curl_close($ch);
+
     return $response;
   }
 }
-
-?>
\ No newline at end of file
diff --git a/modules/viddler_sitemap/viddler_sitemap.info b/modules/viddler_sitemap/viddler_sitemap.info
new file mode 100755
index 0000000..2763f30
--- /dev/null
+++ b/modules/viddler_sitemap/viddler_sitemap.info
@@ -0,0 +1,6 @@
+name = Viddler Sitemap
+description = Generates a Video Sitemap
+core = 7.x
+package = Viddler
+files[] = library/video-sitemap.php
+files[] = ../../library/phpviddler.php
diff --git a/modules/viddler_sitemap/viddler_sitemap.install b/modules/viddler_sitemap/viddler_sitemap.install
new file mode 100755
index 0000000..404dec2
--- /dev/null
+++ b/modules/viddler_sitemap/viddler_sitemap.install
@@ -0,0 +1,11 @@
+<?php
+/**
+ * Implements hook_schema().
+ */
+function viddler_sitemap_schema() {
+  // Creating own cache table because I don't want the cache to be cleared
+  // everytime you git flush cache, etc...
+  $schema['cache_viddler_sitemap'] = drupal_get_schema_unprocessed('system', 'cache');
+
+  return $schema;
+}
\ No newline at end of file
diff --git a/modules/viddler_sitemap/viddler_sitemap.module b/modules/viddler_sitemap/viddler_sitemap.module
new file mode 100755
index 0000000..492aca2
--- /dev/null
+++ b/modules/viddler_sitemap/viddler_sitemap.module
@@ -0,0 +1,232 @@
+<?php
+/**
+ * @file viddler_sitemap.module
+ * Creates a site map of all Viddler videos
+ */
+
+// 2 Weeks 
+define('VIDDLER_SITEMAP_CACHE_TIME', 1209600);
+
+/**
+ * Implements hook_menu().
+ */
+function viddler_sitemap_menu() {
+  $items['videos.xml'] = [
+    'page callback' => '_viddler_sitemap_videos',
+    'access arguments' => ['access content'],
+    'type' => MENU_CALLBACK,
+  ];
+
+  // Force Cache to refresh.
+  $items['admin/config/media/viddler/sitemap'] = [
+    'title' => 'Refresh Viddler Sitemap',
+    'description' => 'Manually force the sitemap to reset its cache version.',
+    'page callback' => 'viddler_sitemap_refresh',
+    'access arguments' => ['administer site configuration'],
+    'access callback' => 'user_access',
+    'type' => MENU_LOCAL_ACTION,
+    'weight' => 0,
+  ];
+
+  return $items;
+}
+
+/**
+ * Generate Videos Sitemap
+ */
+function _viddler_sitemap_videos() {
+  $sitemap = &drupal_static(__FUNCTION__);
+  if (!isset($sitemap)) {
+    if ($cache = cache_get('viddler_sitemap', 'cache_viddler_sitemap')) {
+      $sitemap = $cache->data;
+    }
+    else {
+      $sitemap = viddler_sitemap_update_sitmap_cache();
+    }
+  }
+
+  drupal_add_http_header('Content-Type', 'text/xml; charset=utf-8');
+
+  print $sitemap;
+}
+
+/**
+ * Uses the Viddler API to get all the videos per user.  The easier way would
+ * be to get info one video at a time but Viddler limits the amount of calls.
+ * This is the way they recommended.
+ *
+ * @param $api_key
+ *  the api key associated with the Viddler account
+ * @param $user
+ *  the Viddle username
+ * @param $password
+ *  the Viddler password
+ * @param $per_page
+ *  the amount of videos that you want Viddler to give to you on the api call
+ * @param $max
+ *  the maximum amount of pages of videos. (50,000 is the maximum you can
+ *   display on a page). if we get a lot more videos than you may want to
+ *   increase this to more.  Max would be 500
+ *
+ * @return array
+ */
+function viddler_sitemap_get_videos_per_user($api_key, $username, $password, $per_page = 100, $max = 100) {
+  $current_page = 1;
+
+  $viddler_connect = new Viddler_V2($api_key);
+  $session_id = viddler_get_session_id($viddler_connect, $username, $password);
+
+  $videos_per_account = [];
+
+  for ($current_page; $current_page <= $max; $current_page++) {
+    //Get all the videos from one account
+    $videos = $viddler_connect->viddler_videos_getByUser([
+      'sessionid' => $session_id,
+      'page' => $current_page,
+      'per_page' => $per_page,
+      'visibility' => 'public,embed',
+    ]);
+
+    if (isset($videos['list_result']['video_list'])) {
+      foreach ($videos['list_result']['video_list'] as $video_info) {
+        $videos_per_account[$video_info['id']] = [
+          'id' => $video_info['id'],
+          'permissions' => $video_info['permissions'],
+          'files' => $video_info['files'],
+          'length' => $video_info['length'],
+          'view_count' => $video_info['view_count'],
+        ];
+      }
+    }
+  }
+
+  return $videos_per_account;
+}
+
+/**
+ * Sets the sitemap into cache
+ */
+function viddler_sitemap_update_sitmap_cache() {
+  // Get videos from main account
+  $videos_from_viddler = viddler_sitemap_get_videos_per_user(variable_get('viddler_apikey', ''), variable_get('viddler_user', ''), variable_get('viddler_password', ''));
+
+  // Get videos from second account
+  if (variable_get('viddler_password2', FALSE)) {
+    $videos_from_viddler_second = viddler_sitemap_get_videos_per_user(variable_get('viddler_apikey', ''), variable_get('viddler_user', ''), variable_get('viddler_password', ''));
+    if ($videos_from_viddler_second) {
+      $videos_from_viddler = array_merge($videos_from_viddler, $videos_from_viddler_second);
+    }
+  }
+
+  // Get all nids and viddler ids from all nodes that have a video
+  $query = db_select('field_data_field_viddler_id', 'v')
+    ->fields('v', ['field_viddler_id_value', 'entity_id'])
+    ->orderBy('entity_id', 'DESC');
+  $video_nodes = $query->execute()->fetchAll();
+
+  // Get all xml rows to put into sitemap
+  $xml = '';
+  foreach ($video_nodes as $video_node) {
+    if (isset($videos_from_viddler[$video_node->field_viddler_id_value])) {
+      $xml .= viddler_sitemap_get_sitemap_row($videos_from_viddler[$video_node->field_viddler_id_value], node_load($video_node->entity_id));
+    }
+  }
+
+  // Create sitemap
+  $sitemap = viddler_create_sitemap($xml);
+  cache_set('viddler_sitemap', $sitemap, 'cache_viddler_sitemap', time() + VIDDLER_SITEMAP_CACHE_TIME);
+
+  return $sitemap;
+}
+
+/**
+ * Implements hook_cron().
+ */
+function viddler_sitemap_cron() {
+  // Run once a day at 1:00am
+  if (date('G') == 1) {
+    viddler_sitemap_update_sitmap_cache();
+    watchdog('viddler_sitemap', 'Viddler Sitemap Has been refreshed on %time', ['%time' => date("F j, Y, g:i a")]);
+  }
+}
+
+/**
+ * You can manually refresh the sitemap
+ */
+function viddler_sitemap_refresh() {
+  viddler_sitemap_update_sitmap_cache();
+  watchdog('viddler_sitemap', 'Viddler Sitemap Has been refreshed on %time', ['%time' => date("F j, Y, g:i a")]);
+  drupal_goto('videos.xml');
+}
+
+/**
+ * Sets the sitemap row
+ *
+ * @param $video
+ *  video info array provided from viddler
+ * @param $node
+ *  the node object
+ *
+ * @return $xml
+ *  all the rows
+ */
+function viddler_sitemap_get_sitemap_row($video, $node) {
+  $xml = '';
+  $embed = (isset($video['permissions']['embed']['level']) && $video['permissions']['embed']['level'] != 'private') ? 'yes' : 'no';
+
+  $xml .= '<url>';
+  $xml .= '<loc>' . viddler_getPathAlias($node->nid) . '</loc>';
+  $xml .= '<video:video>';
+  $xml .= '<video:thumbnail_loc>http://www.viddler.com/thumbnail/' . $video['id'] . '</video:thumbnail_loc>';
+  $xml .= '<video:title>' . htmlspecialchars($node->title, ENT_QUOTES, 'UTF-8') . '</video:title>';
+  if (isset($node->field_deckhead[LANGUAGE_NONE][0]['value'])) {
+    $xml .= '<video:description>' . htmlspecialchars(strip_tags($node->field_deckhead[LANGUAGE_NONE][0]['value']), ENT_QUOTES, 'UTF-8') . '</video:description>';
+  }
+
+  $xml .= '<video:player_loc allow_embed="' . $embed . '">http://www.viddler.com/embed/' . $video['id'] . '</video:player_loc>';
+  $xml .= '<video:duration>' . $video['length'] . '</video:duration>';
+  $xml .= '<video:view_count>' . $video['view_count'] . '</video:view_count>';
+  $xml .= '<video:publication_date>' . date('Y-m-d', $node->created) . '</video:publication_date>';
+  $xml .= '<video:family_friendly>yes</video:family_friendly>';
+  $xml .= '<video:live>no</video:live>';
+  $xml .= '</video:video>';
+  $xml .= '</url>';
+
+  return $xml;
+}
+
+/**
+ * Sets the opening and closing of sitemap
+ *
+ * @param $xml_rows
+ *  all the rows
+ *
+ * @return string
+ */
+function viddler_create_sitemap($xml_rows) {
+  $str = '<?xml version="1.0" encoding="UTF-8"?>';
+  $str .= '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:video="http://www.google.com/schemas/sitemap-video/1.1">';
+  $str .= $xml_rows;
+  $str .= '</urlset>';
+
+  return $str;
+}
+
+/**
+ * Get full path of node
+ *
+ * @param $nid
+ *  the node id
+ *
+ * @return string The full path alias
+ */
+function viddler_getPathAlias($nid) {
+  global $base_url;
+
+  // Check for an alias using drupal_lookup_path().
+  if ((drupal_lookup_path('alias', 'node/' . $nid) !== FALSE)) {
+    $alias = drupal_lookup_path('alias', 'node/' . $nid);
+
+    return $base_url . '/' . $alias;
+  }
+}
diff --git a/viddler.field.inc b/viddler.field.inc
old mode 100644
new mode 100755
index 33ab586..dcfbf26
--- a/viddler.field.inc
+++ b/viddler.field.inc
@@ -1,20 +1,25 @@
 <?php
+
+module_load_include('php', 'viddler', 'library/phpviddler');
+
 /**
  * Implement hook_field_info().
  */
 function viddler_field_info() {
-  return array(
-    'viddler_field' => array(
-	    'label' => t('Viddler'),
-  	  'description' => t('Stores the Viddler ID.'),
-  	  'default_widget' => 'viddler_widget',
-  	  'default_formatter' => 'viddler_default',
-  	  'instance_settings' => array(
-        'dimension' => array(),
-				'input_type' => array(),
-      ),
-	  ),
-  );
+  return [
+    'viddler_field' => [
+      'label' => t('Viddler'),
+      'description' => t('Stores the Viddler ID.'),
+      'default_widget' => 'viddler_widget',
+      'default_formatter' => 'viddler_default',
+      'instance_settings' => [
+        'dimension' => [],
+        'input_type' => [],
+        'file_extensions' => 'mp4 ogg avi mov wmv flv ogv webm m4v',
+        'file_directory' => 'videos/viddler',
+      ],
+    ],
+  ];
 }
 
 /**
@@ -29,26 +34,56 @@ function viddler_field_is_empty($item, $field) {
  */
 function viddler_field_instance_settings_form($field, $instance) {
   $settings = $instance['settings'];
-  
-	$form['dimension']['full'] = array(
-		'#type' => 'fieldset',
-		'#title' => t('Video Display Settings'),
-		'#description' => t('These settings control how this video is displayed in its full size, which defaults to !widthx!height.', array('!width' => VIDDLER_DEFAULT_VIDEO_WIDTH, '!height' => VIDDLER_DEFAULT_VIDEO_HEIGHT)),
-	);
-	
-  $form['dimension']['full']['width'] = array(
+
+  $form['dimension']['full'] = [
+    '#type' => 'fieldset',
+    '#title' => t('Video Display Settings'),
+    '#description' => t('These settings control how this video is displayed in its full size, which defaults to !widthx!height.', [
+      '!width' => VIDDLER_DEFAULT_VIDEO_WIDTH,
+      '!height' => VIDDLER_DEFAULT_VIDEO_HEIGHT,
+    ]),
+  ];
+
+  $form['dimension']['full']['width'] = [
     '#type' => 'textfield',
     '#title' => t('Width'),
     '#default_value' => @$settings['dimension']['full']['width'] ? $settings['dimension']['full']['width'] : VIDDLER_DEFAULT_VIDEO_WIDTH,
-    '#description' => t('The width of the video. It defaults to !width.', array('!width' => VIDDLER_DEFAULT_VIDEO_WIDTH)),
-  );
+    '#description' => t('The width of the video. It defaults to !width.', ['!width' => VIDDLER_DEFAULT_VIDEO_WIDTH]),
+  ];
 
-  $form['dimension']['full']['height'] = array(
+  $form['dimension']['full']['height'] = [
     '#type' => 'textfield',
-    '#title' => t('Width'),
+    '#title' => t('Height'),
     '#default_value' => @$settings['dimension']['full']['height'] ? $settings['dimension']['full']['height'] : VIDDLER_DEFAULT_VIDEO_HEIGHT,
-    '#description' => t('The height of the video. It defaults to !height.', array('!height' => VIDDLER_DEFAULT_VIDEO_HEIGHT)),
-  );
+    '#description' => t('The height of the video. Leave blank to have Viddler set automatically.'),
+  ];
+
+  $form['viddler_info'] = [
+    '#type' => 'fieldset',
+    '#title' => t('Video Description Text'),
+    '#description' => t('The text that will be below each field.'),
+  ];
+
+  $form['viddler_info']['id_message'] = [
+    '#type' => 'textarea',
+    '#title' => t('Viddler Id Message'),
+    '#default_value' => @$settings['viddler_info']['id_message'] ? $settings['viddler_info']['id_message'] : '',
+    '#description' => t('Text Info that will be under the Viddler Id field.'),
+  ];
+
+  $form['viddler_info']['title'] = [
+    '#type' => 'textarea',
+    '#title' => t('Title Message'),
+    '#default_value' => @$settings['viddler_info']['title'] ? $settings['viddler_info']['title'] : '',
+    '#description' => t('Text Info that will be under the Title field.'),
+  ];
+
+  $form['viddler_info']['upload_message'] = [
+    '#type' => 'textarea',
+    '#title' => t('Upload Message'),
+    '#default_value' => @$settings['viddler_info']['upload_message'] ? $settings['viddler_info']['upload_message'] : '',
+    '#description' => t('Text Info that will be under the Upload Video field.'),
+  ];
 
   return $form;
 }
@@ -57,119 +92,237 @@ function viddler_field_instance_settings_form($field, $instance) {
  * Implement hook_field_widget_info().
  */
 function viddler_field_widget_info() {
-  return array(
-    'viddler_widget' => array(
-	    'label' => t('Video'),
-	    'field types' => array('viddler_field'),
-			'behaviors' => array(
+  return [
+    'viddler_widget' => [
+      'label' => t('Video'),
+      'field types' => ['viddler_field'],
+      'behaviors' => [
         'default value' => FIELD_BEHAVIOR_NONE,
-      ),
-			'settings' => array(
-        'dimension' => array(
-					'full' => array(
-						'width' => VIDDLER_DEFAULT_VIDEO_WIDTH, 
-						'height' => VIDDLER_DEFAULT_VIDEO_HEIGHT
-					)
-				),
-      ),
-	  ),
-  );
+      ],
+      'settings' => [
+        'dimension' => [
+          'full' => [
+            'width' => VIDDLER_DEFAULT_VIDEO_WIDTH,
+            'height' => VIDDLER_DEFAULT_VIDEO_HEIGHT,
+          ],
+        ],
+      ],
+    ],
+
+    'viddler_video_upload' => [
+      'label' => t('Video Upload'),
+      'field types' => ['viddler_field'],
+      'settings' => [
+        'progress_indicator' => 'throbber',
+      ],
+      'behaviors' => [
+        'default value' => FIELD_BEHAVIOR_NONE,
+      ],
+    ],
+  ];
 }
 
 /**
  * Implement hook_field_formatter_info().
  */
 function viddler_field_formatter_info() {
-  return array(
-    'viddler_default' => array(
+  return [
+    'viddler_default' => [
       'label' => t('Video'),
-      'field types' => array('viddler_field'),
-    ),
-	  'viddler_image' => array(
-	    'label' => t('Image'),
-	    'field types' => array('viddler_field'),
-			'settings' => array('image_style' => ''),
-	  ),
-  );
+      'field types' => ['viddler_field'],
+    ],
+    'viddler_image' => [
+      'label' => t('Image'),
+      'field types' => ['viddler_field'],
+      'settings' => ['image_style' => '', 'image_link' => ''],
+    ],
+  ];
 }
 
 /**
  * Implement hook_field_widget().
- * Todo: When saving default value in settings, it also enter here. so i need to consider default values. and how to display them in the settings page
+ * @todo: When saving default value in settings, it also enter here. So I need
+ * to consider default values. and how to display them in the settings page
  */
 function viddler_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
-	$value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
-	$t_url = isset($items[$delta]['thumbnail_url']) ? $items[$delta]['thumbnail_url'] : '';
-	$t_fid = isset($items[$delta]['thumbnail_fid']) ? $items[$delta]['thumbnail_fid'] : '';
-	$code = isset($items[$delta]['embed_code']) ? $items[$delta]['embed_code'] : '';
-	
-	$element['value'] = $element + array(
-    '#type' => 'textfield',
-    '#default_value' => $value,
-  );
-
-	$element['thumbnail_url'] = array(
-    '#type' => 'value',
-    '#value' => $t_url,
-  );
-	
-	$element['embed_code'] = array(
-    '#type' => 'value',
-    '#value' => $code,
-  );
-	
-	$element['thumbnail_fid'] = array(
-    '#type' => 'value',
-    '#value' => $t_fid,
-  );
-
-	return $element;
+
+  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
+  $title = isset($items[$delta]['video_title']) ? $items[$delta]['video_title'] : '';
+  $video_fid = isset($items[$delta]['video_fid']) ? $items[$delta]['video_fid'] : '';
+  $t_url = isset($items[$delta]['thumbnail_url']) ? $items[$delta]['thumbnail_url'] : '';
+  $t_fid = isset($items[$delta]['thumbnail_fid']) ? $items[$delta]['thumbnail_fid'] : '';
+  $code = isset($items[$delta]['embed_code']) ? $items[$delta]['embed_code'] : '';
+
+  switch ($instance['widget']['type']) {
+    case 'viddler_widget':
+      $element['value'] = $element + [
+          '#type' => 'textfield',
+          '#default_value' => $value,
+        ];
+
+      $element['thumbnail_url'] = [
+        '#type' => 'value',
+        '#value' => $t_url,
+      ];
+
+      $element['embed_code'] = [
+        '#type' => 'value',
+        '#value' => $code,
+      ];
+
+      $element['thumbnail_fid'] = [
+        '#type' => 'value',
+        '#value' => $t_fid,
+      ];
+      break;
+    case 'viddler_video_upload':
+      // This widget only works with 1 Video per node.  Don't set to Unlimited or anything above 1.
+      // Changing the default value to a value so it show up
+      $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : 'temp';
+
+      // Hide/Unhide based on if there is a Viddler ID already
+      if ($value != 'temp') {
+        $viddler_id_type = 'textfield';
+        $viddler_title_type = 'hidden';
+        $viddler_video_type = 'hidden';
+      }
+      else {
+        $viddler_id_type = 'hidden';
+        $viddler_title_type = 'textfield';
+        $viddler_video_type = 'managed_file';
+      }
+
+      $element['value'] = [
+        '#type' => $viddler_id_type,
+        '#title' => t('Viddler ID'),
+        '#default_value' => $value,
+        '#description' => t($instance['settings']['viddler_info']['id_message']),
+      ];
+
+      $element['video_title'] = [
+        '#type' => $viddler_title_type,
+        '#title' => t('Video Title'),
+        '#description' => t($instance['settings']['viddler_info']['title']),
+        '#default_value' => $title,
+      ];
+
+      $element['video_fid'] = [
+        '#type' => $viddler_video_type,
+        '#title' => t('Upload Video'),
+        '#upload_validators' => [
+          'file_validate_extensions' => ["wmv mp4 ogg avi mov wmv flv ogv webm"],
+        ],
+        '#upload_location' => 'public://' . $instance['settings']['file_directory'],
+        '#default_value' => $video_fid,
+        '#description' => t($instance['settings']['viddler_info']['upload_message']),
+      ];
+
+      $element['thumbnail_url'] = [
+        '#type' => 'value',
+        '#value' => $t_url,
+      ];
+
+      $element['embed_code'] = [
+        '#type' => 'value',
+        '#value' => $code,
+      ];
+
+      $element['thumbnail_fid'] = [
+        '#type' => 'value',
+        '#value' => $t_fid,
+      ];
+
+      break;
+  }
+
+  return $element;
 }
 
 /**
  * Implements hook_field_formatter_view().
  */
 function viddler_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
-  $element = array();
-
-	$api = variable_get('viddler_apikey', '');
-	if (!$api) return $element;
-  
-	foreach ($items as $delta => $item) {
-		if (!$viddler_id = $item['value']) continue;
-		
-		switch($display['type']) {
-			case 'viddler_image':
-				$file = file_load($item['thumbnail_fid']);
-				
-				if ($file) {
-					$item['uri'] = $file->uri;
-					$item['alt'] = '';
-					$item['title'] = '';
-					$item['attributes'] = array();
-
-					$element[$delta] = array(
-			      '#theme' => 'image_formatter',
-			      '#item' => $item,
-			      '#image_style' => $display['settings']['image_style'],
-			      '#path' => '',
-			    );
-				}
-				
-			break;
-			default:
-				$markup = $item['embed_code'];
-				$element[$delta] = array('#markup' => $markup);
-			break;
-		}
-		
-	}
+  $element = [];
+
+  $api = variable_get('viddler_apikey', '');
+  if (!$api) {
+    return $element;
+  }
+
+  foreach ($items as $delta => $item) {
+    switch ($display['type']) {
+      case 'viddler_image':
+        // Check if the formatter involves a link.
+        if (isset($display['settings']['image_link'])) {
+          if ($display['settings']['image_link'] == 'content') {
+            $uri = entity_uri($object_type, $object);
+          }
+        }
+
+        $file = file_load($item['thumbnail_fid']);
 
+        if ($file) {
+          $item['uri'] = $file->uri;
+          $item['alt'] = $object->title;
+          $item['title'] = '';
+          $item['attributes'] = [];
+
+          $element[$delta] = [
+            '#theme' => 'image_formatter',
+            '#item' => $item,
+            '#image_style' => $display['settings']['image_style'],
+            '#path' => isset($uri) ? $uri : '',
+          ];
+        }
+
+        break;
+      default:
+        $markup = _viddler_generate_markup($item);
+        $element[$delta] = ['#markup' => $markup];
+
+        break;
+    }
+
+  }
 
   return $element;
 }
 
 /**
+ * Generate markup for viddler video field.
+ *
+ * @param $item
+ *
+ * @return string
+ */
+function _viddler_generate_markup($item) {
+  $markup = '';
+  $viddler_id = $item['value'];
+
+  if (!empty($viddler_id)) {
+    $markup .= '<div class="viddler-wrapper">';
+    $markup .= '<div id="viddler-player-' . $viddler_id .'"></div>';
+    $markup .= '</div>';
+
+    drupal_add_js([
+      'viddler' => [
+        'viddlerId' => $viddler_id,
+      ]
+    ], 'setting');
+
+    drupal_add_js(drupal_get_path('module', 'viddler') . '/js/viddler-player.js', [
+      'type' => 'file'
+    ]);
+
+    drupal_add_css(drupal_get_path('module', 'viddler') . '/css/styles.css', [
+      'type' => 'file'
+    ]);
+  }
+
+  return $markup;
+}
+
+/**
  * Implements hook_field_formatter_settings_form().
  */
 function viddler_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
@@ -177,13 +330,26 @@ function viddler_field_formatter_settings_form($field, $instance, $view_mode, $f
   $settings = $display['settings'];
 
   $image_styles = image_style_options(FALSE);
-  $element['image_style'] = array(
+  $element['image_style'] = [
     '#title' => t('Image style'),
     '#type' => 'select',
     '#default_value' => $settings['image_style'],
     '#empty_option' => t('None (original image)'),
     '#options' => $image_styles,
-  );
+  ];
+
+  $link_types = [
+    'content' => t('Content'),
+    'file' => t('File'),
+  ];
+
+  $element['image_link'] = [
+    '#title' => t('Link video image to'),
+    '#type' => 'select',
+    '#default_value' => $settings['image_link'],
+    '#empty_option' => t('Nothing'),
+    '#options' => $link_types,
+  ];
 
   return $element;
 }
@@ -194,158 +360,375 @@ function viddler_field_formatter_settings_form($field, $instance, $view_mode, $f
 function viddler_field_formatter_settings_summary($field, $instance, $view_mode) {
   $display = $instance['display'][$view_mode];
   $settings = $display['settings'];
-	
-  $summary = array();
-
-	if ($display['type'] == 'viddler_image') {
-		$image_styles = image_style_options(FALSE);
-	  // Unset possible 'No defined styles' option.
-	  unset($image_styles['']);
-	  // Styles could be lost because of enabled/disabled modules that defines
-	  // their styles in code.
-	  if (isset($image_styles[$settings['image_style']])) {
-	    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
-	  }
-	  else {
-	    $summary[] = t('Original image');
-	  }
-	}
+
+  $summary = [];
+
+  if ($display['type'] == 'viddler_image') {
+    $image_styles = image_style_options(FALSE);
+    // Unset possible 'No defined styles' option.
+    unset($image_styles['']);
+    // Styles could be lost because of enabled/disabled modules that defines
+    // their styles in code.
+    if (isset($image_styles[$settings['image_style']])) {
+      $summary[] = t('Image style: @style', ['@style' => $image_styles[$settings['image_style']]]);
+    }
+    else {
+      $summary[] = t('Original image');
+    }
+
+    $link_types = [
+      'content' => t('Linked to content'),
+    ];
+
+    // Display this setting only if image is linked.
+    if (isset($link_types[$settings['image_link']])) {
+      $summary[] = $link_types[$settings['image_link']];
+    }
+
+  }
 
   return implode('<br />', $summary);
 }
 
+/**
+ * Implements hook_field_insert().
+ */
 function viddler_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
-	_viddler_return_video_details($entity_type, $entity, $instance, $items);
+  #1792 - Uncomment when back up
+  _viddler_return_video_details($entity_type, $entity, $instance, $items);
 }
 
+/**
+ * Implements hook_field_update().
+ */
 function viddler_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
-	list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
-	
-	// Build a display of the current FIDs.
-  $current_viddler = array();
+  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
+
+  // Build a display of the current FIDs.
+  $current_viddler = [];
   foreach ($items as $item) {
     $current_viddler[] = $item['value'];
   }
-	
-	// Create a bare-bones entity so that we can load its previous values.
-  $original = entity_create_stub_entity($entity_type, array($id, $vid, $bundle));
-  field_attach_load($entity_type, array($id => $original), FIELD_LOAD_CURRENT, array('field_id' => $field['id']));
-	
-	$original_items = array();
-	if (!empty($original->{$field['field_name']}[$langcode])) {
-		$original_items = $original->{$field['field_name']}[$langcode];
-	}
-	
-	_viddler_return_video_details($entity_type, $entity, $instance, $items, $original_items, $entity_type, $entity);
-	
-	// Compare the original field values with the ones that are being saved.
-  $original_items = array();
+
+  // Create a bare-bones entity so that we can load its previous values.
+  $original = entity_create_stub_entity($entity_type, [$id, $vid, $bundle]);
+  field_attach_load($entity_type, [$id => $original], FIELD_LOAD_CURRENT, ['field_id' => $field['id']]);
+
+  $original_items = [];
+  if (!empty($original->{$field['field_name']}[$langcode])) {
+    $original_items = $original->{$field['field_name']}[$langcode];
+  }
+
+  _viddler_return_video_details($entity_type, $entity, $instance, $items, $original_items);
+
+  // Compare the original field values with the ones that are being saved.
+  $original_items = [];
   if (!empty($original->{$field['field_name']}[$langcode])) {
     foreach ($original->{$field['field_name']}[$langcode] as $key => $original_item) {
       $original_items[] = $original_item['value'];
       if (isset($original_item['value']) && !in_array($original_item['value'], $current_viddler) && $original_item['thumbnail_fid']) {
         // Decrement the file usage count by 1.
         $file = file_load($original_item['thumbnail_fid']);
-				if ($file) {
-	        file_usage_delete($file, 'viddler', $entity_type, $id, 1);
-					file_delete($file);
-				}
+        if ($file) {
+          file_usage_delete($file, 'viddler', $entity_type, $id, 1);
+          file_delete($file);
+        }
       }
     }
   }
-	
 }
 
+/**
+ * Implements hook_field_delete().
+ */
 function viddler_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
-	list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
-	foreach ($items as $delta => $item) {
+  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
+  foreach ($items as $delta => $item) {
     $file = file_load($item['thumbnail_fid']);
-		if ($file) {
+    if ($file) {
       file_usage_delete($file, 'viddler', $entity_type, $id, 1);
-			file_delete($file);
-		}
+      file_delete($file);
+    }
   }
 }
 
 /**
- * Get the embed code and save thumbnail locally so we can use it for image_styles
+ * Get the embed code and save thumbnail locally so we can use it for
+ * image_styles
  */
-function _viddler_return_video_details($entity_type, $entity, $instance, &$items, $original_items = array()) {
-	list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
-	
-	$api = variable_get('viddler_apikey', '');
-	if (!$api) {
-		drupal_set_message(t('Viddler API key is missing.'), 'error');
-		$items = array();
-		return;
-	}
-	
-	$original_items_lookup = array();
-	if ($original_items) {
-		foreach ($original_items as $key => $original_item) {
-			$original_items_lookup[$key] = $original_item['value'];
+function _viddler_return_video_details($entity_type, $entity, $instance, &$items, $original_items = []) {
+  $session_id = NULL;
+  $count = 0;
+  $api = NULL;
+  $original_items_lookup = [];
+
+  // If viddler id has text of 'temp' and there is a video_fid than we need to upload the video
+  if ($items && $items[0]['value'] == 'temp' && $items[0]['video_fid']) {
+    $video = viddler_upload_to_viddler($items[0]);
+    // Get the Viddler id
+    $items[0]['value'] = $video['video']['id'];
+  }
+
+
+  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
+
+  // Looping through twice.  If it fails on one account than use the second account
+  while ($count < 2 && !isset($passed)) {
+    $count++;
+
+    if ($count == 1) {
+      $api = variable_get('viddler_apikey', '');
+    }
+    elseif ($count == 2 && variable_get('viddler_apikey2', '')) {
+      $api = variable_get('viddler_apikey2', '');
+    }
+
+    if (!isset($api)) {
+      drupal_set_message(t('Viddler API key is missing.'), 'error');
+      $items = [];
+
+      return;
     }
-	}
-	
-	//module_load_include('module', 'media_internet', 'media_internet');
-	
-	$viddler_connect = new Viddler_V2($api);
-	$media = new MediaInternetFileHandler('');
-	
-	foreach($items as &$item) {
-		if (!$viddler_id = $item['value']) continue;
-		
-		if ($item['value'] == 'x') {
-			$item['embed_code'] = '';
-			$item['thumbnail_url'] = '';
-			$item['thumbnail_fid'] = 0;
-			continue;
-		}
-		
-		$args = array('video_id' => $viddler_id);
-		$video = $viddler_connect->viddler_videos_getDetails($args);
-		
-		if (isset($video['error'])) {
-			$item['embed_code'] = '';
-			$item['thumbnail_url'] = '';
-			$item['thumbnail_fid'] = 0;
-			continue;
-		}
-		
-		// Get the embed code
-		if (!$item['embed_code'] || !in_array($item['value'], $original_items_lookup)) {
-			$width 	= $instance['settings']['dimension']['full']['width'];
-			$height = $instance['settings']['dimension']['full']['height'];
-			$autoplay = false;
-
-			// we have more flexibility with widht and height when using getEmbedCode()
-			$code = $viddler_connect->viddler_videos_getEmbedCode($args);
-
-			$embed_code = '';
-			if ($code && isset($code['video']['embed_code'])) $embed_code = $code['video']['embed_code'];
-
-			$item['embed_code'] = $embed_code;
-		}
-		
-		// Get the thumbnail
-		if (!$item['thumbnail_url'] || !in_array($item['value'], $original_items_lookup)) {
-			$thumbnail_path = '';
-			if ($video && isset($video['video']['thumbnail_url']) && $video['video']['thumbnail_url']) {
-				$thumbnail_path = $video['video']['thumbnail_url'];
-				
-				$file_obj = file_uri_to_object($thumbnail_path);
-				$media->preSave($file_obj);
-				$media->postSave($file_obj);
-
-				$item['thumbnail_url'] = $thumbnail_path;
-				$item['thumbnail_fid'] = $file_obj->fid;
-				
-				file_usage_add($file_obj, 'viddler', $entity_type, $id);
-			}
-
-      
-		}
-		
-	}
-	
+
+    if ($original_items) {
+      foreach ($original_items as $key => $original_item) {
+        $original_items_lookup[$key] = $original_item['value'];
+      }
+    }
+
+    $viddler_connect = new Viddler_V2($api);
+    $media = new MediaInternetFileHandler('');
+
+    if ($count == 1) {
+      $session_id = viddler_get_session_id($viddler_connect, variable_get('viddler_user', ''), variable_get('viddler_password', ''));
+    }
+    elseif ($count == 2) {
+      $session_id = viddler_get_session_id($viddler_connect, variable_get('viddler_user2', ''), variable_get('viddler_password2', ''));
+    }
+
+    $force_update = variable_get('viddler_force_update', FALSE);
+
+    foreach ($items as &$item) {
+      if (!$viddler_id = $item['value']) {
+        continue;
+      }
+
+      if ($item['value'] == 'x') {
+        $item['embed_code'] = '';
+        $item['thumbnail_url'] = '';
+        $item['thumbnail_fid'] = 0;
+        continue;
+      }
+
+      $args = ['video_id' => $viddler_id];
+      if ($session_id) {
+        $args['sessionid'] = $session_id;
+      }
+
+      $video = $viddler_connect->viddler_videos_getDetails($args);
+
+      if (isset($video['error'])) {
+        $item['embed_code'] = '';
+        $item['thumbnail_url'] = '';
+        $item['thumbnail_fid'] = 0;
+        continue;
+      }
+
+      // Get the embed code
+      if ($force_update || !$item['embed_code'] || !in_array($item['value'], $original_items_lookup)) {
+        $width = $instance['settings']['dimension']['full']['width'];
+        $args['width'] = $width;
+        $height = $instance['settings']['dimension']['full']['height'];
+        $args['height'] = $height;
+        $args['wmode'] = 'transparent';
+
+        // Updating to the latest recommended embed code (iframe). Other types
+        // can be found: http://developers.viddler.com/#viddler-videos-getembedcodetypes
+        $args['embed_code_type'] = 5;
+
+        // We have more flexibility with widht and height when using getEmbedCode().
+        $code = $viddler_connect->viddler_videos_getEmbedCode($args);
+
+        // Forbidden.
+        if (isset($code['error']['code'])) {
+          if ($session_id) {
+            $viddler_connect->viddler_videos_setDetails($args);
+            $code = $viddler_connect->viddler_videos_getEmbedCode($args);
+
+            if (isset($code['error']['code'])) {
+              $error_message[] = 'Unable to get the embed code. Please see the viddler error details: <br/>Error: 02-' . $code['error']['code'] . ': ' . $code['error']['details'];
+              _viddler_log_error_watchdog($video, $code, $id);
+            }
+          }
+          else {
+            $error_message[] = 'Unable to get the embed code. Please see the viddler error details: <br/>Error: 02-' . $code['error']['code'] . ': ' . $code['error']['details'];
+            _viddler_log_error_watchdog($video, $code, $id);
+          }
+        }
+        else {
+          $passed = TRUE;
+        }
+
+        $embed_code = '';
+        if (isset($code['video']['embed_code'])) {
+          $embed_code = $code['video']['embed_code'];
+        }
+
+        $item['embed_code'] = $embed_code;
+      }
+
+      // Get the thumbnail.
+      if ($force_update || !$item['thumbnail_url'] || !in_array($item['value'], $original_items_lookup)) {
+        if ($video && isset($video['video']['thumbnail_url']) && $video['video']['thumbnail_url']) {
+          $thumbnail_path = $video['video']['thumbnail_url'];
+
+          $file_obj = file_uri_to_object($thumbnail_path);
+          $media->preSave($file_obj);
+          $media->postSave($file_obj);
+
+          $item['thumbnail_url'] = $thumbnail_path;
+          $item['thumbnail_fid'] = $file_obj->fid;
+
+          file_usage_add($file_obj, 'viddler', $entity_type, $id);
+        }
+      }
+    }
+  }
+
+  // Only display the error if it wasn't embeded.
+  if (isset($error_message) && !isset($passed)) {
+    foreach ($error_message as $message) {
+      drupal_set_message($message, 'error');
+    }
+  }
+}
+
+/**
+ * Function for uploading a video to Viddler
+ *
+ * @param $item
+ *  array of the Viddler Id field items
+ *
+ * @return array|mixed $video
+ *  video object that contains the viddler id of the video
+ */
+function viddler_upload_to_viddler($item) {
+  $fid = intval($item['video_fid']);
+  $file = file_load($fid);
+
+  if ($fid !== 0) {
+    // Create viddler objectAuthenticate as you
+    // Set session id
+    $v = new Viddler_V2(variable_get('viddler_apikey', ''));
+    $session_id = viddler_get_session_id($v, variable_get('viddler_user', ''), variable_get('viddler_password', ''));
+
+    if ($session_id) {
+      /**
+       * Call prepareUpload
+       * Get endpoint
+       * Get token
+       */
+      $response = $v->viddler_videos_prepareUpload(['sessionid' => $session_id]);
+      $endpoint = (isset($response['upload']['endpoint'])) ? $response['upload']['endpoint'] : NULL;
+      $token = (isset($response['upload']['token'])) ? $response['upload']['token'] : NULL;
+
+      // If no title supplied than use the filename
+      if ($item['video_title']) {
+        $title = $item['video_title'];
+      }
+      else {
+        $title = $file->filename;
+      }
+
+      if (!empty($endpoint) || !empty($token)) {
+        $query = [
+          'uploadtoken' => $token,
+          'title' => $title,
+          'file' => '@' . drupal_realpath($file->uri),
+        ];
+
+        /**
+         * Example below tells curl to:
+         * return the result rather than print to screen
+         * follow any redirects
+         * return the headers
+         * return the body
+         * have no timeout
+         * use POST method
+         * set POSTFIELDS
+         */
+        $ch = curl_init();
+        curl_setopt($ch, CURLOPT_URL, $endpoint);
+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
+        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
+        curl_setopt($ch, CURLOPT_HEADER, TRUE);
+        curl_setopt($ch, CURLOPT_NOBODY, FALSE);
+        curl_setopt($ch, CURLOPT_TIMEOUT, 0);
+        curl_setopt($ch, CURLOPT_POST, TRUE);
+        curl_setopt($ch, CURLOPT_POSTFIELDS, $query);
+        $response = curl_exec($ch);
+        $info = curl_getinfo($ch);
+        $header_size = $info['header_size'];
+        $video = unserialize(substr($response, $header_size));
+        curl_close($ch);
+
+        return $video;
+      }
+    }
+  }
+
+  return [];
+}
+
+/**
+ * Function for getting Viddler Session ID
+ *
+ * @param $viddler_connect
+ *  the Viddler connection object
+ * @param $viddler_user
+ *  the username associated with the Viddler Account
+ * @param $viddler_password
+ *  the password associated with the Viddler Account
+ *
+ * @return bool $session_id
+ *  the Viddler session id
+ */
+function viddler_get_session_id($viddler_connect, $viddler_user, $viddler_password) {
+  $session_id = FALSE;
+
+  $args = [
+    'user' => $viddler_user,
+    'password' => urlencode($viddler_password),
+  ];
+
+  $session = $viddler_connect->viddler_users_auth($args);
+  if (isset($session['auth']['sessionid'])) {
+    $session_id = $session['auth']['sessionid'];
+  }
+
+  return $session_id;
+}
+
+/**
+ * Viddler watchdog logger helped function.
+ *
+ * @param $video
+ * @param $code
+ * @param $id
+ */
+function _viddler_log_error_watchdog($video, $code, $id) {
+  $watchdog_err = t('Viddler ID') . ': ' . $video['video']['id']
+    . t('Error') . ': ' . $code['error']['code']
+    . '<br/>' . t('Description') . ': ' . $code['error']['description']
+    . '<br/>' . t('Details') . ': ' . $code['error']['details'];
+
+  $watchdog_err .= '<br/><br/>' . t('Video Details below: ');
+  foreach ($video['video'] as $key => $val) {
+    if (is_array($val)) {
+      $val = serialize($val);
+    }
+    $watchdog_err .= '<br/>' . $key . ': ' . $val;
+  }
+
+  watchdog('viddler', $watchdog_err, [], WATCHDOG_ERROR, l('node/' . $id, 'node/' . $id));
 }
diff --git a/viddler.info b/viddler.info
old mode 100644
new mode 100755
index d982685..149a3a7
--- a/viddler.info
+++ b/viddler.info
@@ -3,4 +3,4 @@ description = "Viddler field"
 core = 7.x
 package = Viddler
 dependencies[] = media_internet
-files[] = library/phpviddler.php
\ No newline at end of file
+files[] = library/phpviddler.php
diff --git a/viddler.install b/viddler.install
old mode 100644
new mode 100755
index a09073c..6a60698
--- a/viddler.install
+++ b/viddler.install
@@ -1,30 +1,66 @@
 <?php
+
 /**
  * Implements hook_field_schema().
  */
 function viddler_field_schema($field) {
-  $columns = array(
-    'value' => array(
+  $columns = [
+    'value' => [
       'type' => 'varchar',
       'length' => 255,
       'not null' => FALSE,
-    ),
-    'embed_code' => array(
+    ],
+    'embed_code' => [
       'type' => 'text',
       'length' => 255,
       'not null' => FALSE,
-    ),
-    'thumbnail_url' => array(
+    ],
+    'thumbnail_url' => [
       'type' => 'varchar',
       'length' => 255,
       'not null' => FALSE,
-    ),
-    'thumbnail_fid' => array(
+    ],
+    'thumbnail_fid' => [
       'type' => 'int',
       'length' => 11,
       'not null' => FALSE,
-    ),
-  );
-  
-  return array('columns' => $columns);
-}
\ No newline at end of file
+    ],
+    'video_fid' => [
+      'type' => 'varchar',
+      'length' => 255,
+      'not null' => FALSE,
+    ],
+    'video_title' => [
+      'type' => 'varchar',
+      'length' => 255,
+      'not null' => FALSE,
+    ],
+  ];
+
+  return ['columns' => $columns];
+}
+
+/**
+ * Add new viddler fields: title and fid.
+ */
+function viddler_update_7002(&$sandbox) {
+  $spec = [
+    'type' => 'varchar',
+    'description' => "Video fid",
+    'length' => 255,
+    'not null' => FALSE,
+  ];
+
+  db_add_field('field_data_field_viddler_id', 'field_viddler_id_video_fid', $spec);
+  db_add_field('field_revision_field_viddler_id ', 'field_viddler_id_video_fid', $spec);
+
+  $spec = [
+    'type' => 'varchar',
+    'description' => "Video Title",
+    'length' => 255,
+    'not null' => FALSE,
+  ];
+
+  db_add_field('field_data_field_viddler_id', 'field_viddler_id_video_title', $spec);
+  db_add_field('field_revision_field_viddler_id', 'field_viddler_id_video_title', $spec);
+}
diff --git a/viddler.module b/viddler.module
old mode 100644
new mode 100755
index dc3f4d3..9c0ca4f
--- a/viddler.module
+++ b/viddler.module
@@ -1,43 +1,110 @@
 <?php
+
 module_load_include('inc', 'viddler', 'viddler.field');
 
 define('VIDDLER_DEFAULT_VIDEO_WIDTH', 430);
-define('VIDDLER_DEFAULT_VIDEO_HEIGHT', 365);
+define('VIDDLER_DEFAULT_VIDEO_HEIGHT', '');
 define('VIDDLER_DEFAULT_PREVIEW_WIDTH', 270);
 define('VIDDLER_DEFAULT_PREVIEW_HEIGHT', 232);
 define('VIDDLER_DEFAULT_THUMBNAIL_WIDTH', 114);
 define('VIDDLER_DEFAULT_THUMBNAIL_HEIGHT', 86);
 
-
+/**
+ * Implements hook_menu().
+ */
 function viddler_menu() {
-  $items['admin/config/media/viddler'] = array(
+  $items['admin/config/media/viddler'] = [
     'title' => 'Viddler',
     'description' => 'Configure Viddler.',
     'page callback' => 'drupal_get_form',
-    'page arguments' => array('viddler_admin_settings_form'),
-    'access arguments' => array('administer site configuration'),
+    'page arguments' => ['viddler_admin_settings_form'],
+    'access arguments' => ['administer site configuration'],
     'type' => MENU_NORMAL_ITEM,
-  );
-  
+  ];
+
   return $items;
 }
 
+/**
+ * Form constructor for administer module settings page.
+ */
 function viddler_admin_settings_form() {
-  $form = array();
-  $form['general'] = array(
+  $form = [];
+
+  $form['general'] = [
     '#type' => 'fieldset',
     '#title' => t('General Settings'),
     '#description' => t('These features will effect all viddler content types.'),
     '#collapsible' => TRUE,
     '#collapsed' => FALSE,
-  );
-  $form['general']['viddler_apikey'] = array(
+  ];
+  $form['general']['viddler_apikey'] = [
     '#type' => 'textfield',
     '#title' => t('Viddler Api Key'),
     '#default_value' => variable_get('viddler_apikey', ''),
     '#required' => FALSE,
     '#description' => t('The viddler api key is the only way we can post recorded or uploaded videos to Viddler.'),
-  );
-  
+  ];
+
+  $form['general']['viddler_user'] = [
+    '#type' => 'textfield',
+    '#title' => t('Viddler User'),
+    '#default_value' => variable_get('viddler_user', ''),
+    '#required' => FALSE,
+    '#description' => t('The viddler user for private videos.'),
+  ];
+
+  $form['general']['viddler_password'] = [
+    '#type' => 'password',
+    '#title' => t('Viddler Password'),
+    '#default_value' => variable_get('viddler_password', ''),
+    '#required' => FALSE,
+    '#description' => t('The viddler password for private videos.'),
+  ];
+
+  $form['general']['viddler_apikey2'] = [
+    '#type' => 'textfield',
+    '#title' => t('Viddler Api Key - Second Account'),
+    '#default_value' => variable_get('viddler_apikey2', ''),
+    '#required' => FALSE,
+    '#description' => t('The viddler api key for a second account is the only way we can post recorded or uploaded videos to Viddler.'),
+  ];
+
+  $form['general']['viddler_user2'] = [
+    '#type' => 'textfield',
+    '#title' => t('Viddler User - Second Account'),
+    '#default_value' => variable_get('viddler_user2', ''),
+    '#required' => FALSE,
+    '#description' => t('The secound account viddler user for private videos.'),
+  ];
+
+  $form['general']['viddler_password2'] = [
+    '#type' => 'password',
+    '#title' => t('Viddler Password - Second Account'),
+    '#default_value' => variable_get('viddler_password2', ''),
+    '#required' => FALSE,
+    '#description' => t('The second account viddler password for private videos.'),
+  ];
+
+  $form['viddler_force_update'] = [
+    '#type' => 'checkbox',
+    '#title' => t('Force update'),
+    '#default_value' => variable_get('viddler_force_update', FALSE),
+    '#description' => t('The module only updates the embed code on node update if it is different from the previous entry. On debugging, it might be useful to force it on every update.'),
+  ];
+
   return system_settings_form($form);
-}
\ No newline at end of file
+}
+
+/**
+ * Implements hook_page_alter().
+ */
+function viddler_page_alter(&$page) {
+  // Add Viddler JS files.  Need to add it to every file because there may be
+  // videos embeded on the page.
+  drupal_add_js('//static.cdn-ec.viddler.com/js/arpeggio/v3/build/main-built.js', [
+    'type' => 'external',
+  ]);
+
+  drupal_add_js(drupal_get_path('module', 'viddler') . '/js/viddler.js', ['scope' => 'footer']);
+}
